#1. Two Sum
Easy

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

-PYTHON-
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        answer = {}
        for i,n in enumerate(nums):
            a = target - n
            if a in answer:
                return [answer[a],i]
            else:
                answer[n] = i
                

-PYTHON3-
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        answer = {}
        for i,n in enumerate(nums):
            a = target - n
            if a in answer:
                return [answer[a],i]
            answer[n] = i
        return

-Java-
class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> answer = new HashMap<Integer, Integer>();
        for(int i=0; i<nums.length;i++){
            int a=target - nums[i];
            if (answer.containsKey(a)){
                int a_index = answer.get(a);
                return (new int[]{a_index,i});
            }
            else{
                answer.put(nums[i],i);
            }
        }
        return (new int[]{});
    }
}



#3sum
Medium
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []



-PYTHON-
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        answer = []
        nums.sort()
        for i,a in enumerate(nums):
            #避免重复使用相同值两次 
            if i>0 and a == nums[i-1]:
                continue
            l=i+1
            r=len(nums)-1
            while l<r:
                tsum = a + nums[l] + nums[r]
                if tsum<0:
                    l+=1
                elif tsum>0:
                    r-=1
                else:
                    answer.append([a,nums[l],nums[r]])
                    #为了避免得到相同的结果，移动左指针l
                    l+=1
                    #循环，如果剩余的数量等于剩余数量-1的值，代表他们是相同的值，就要移动左边指针
                    while nums[l]==nums[l-1] and l<r:
                        l+=1
                        
        return answer
                
        